<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>北流市电视台 Blog</title>
        <link>https://beiliutvstation.github.io/blog</link>
        <description>北流市电视台 Blog</description>
        <lastBuildDate>Wed, 15 Sep 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[21级春季考核要点&指南]]></title>
            <link>https://beiliutvstation.github.io/blog/The Key points of grade 21 Spring Assessment &amp; Guide</link>
            <guid>The Key points of grade 21 Spring Assessment &amp; Guide</guid>
            <pubDate>Wed, 15 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[一些话]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="一些话">一些话<a class="hash-link" href="#一些话" title="Direct link to heading">​</a></h2><p>Hello~ 我是不干人事的 Tanger，首先欢迎你阅读我的文章
😀，也很期待各位大佬的指正，如果对这篇文章感兴趣的话
，不妨收藏一下 ⭐ 本页面，如果有什么想对作者说的话可以
通过两种方式联系本人：</p><p>打开邮箱，发送你的留言至作者的邮箱(<a href="mailto:1907065810@qq.com" target="_blank" rel="noopener noreferrer">1907065810@qq.com</a>)我会在第一时间回复你。✨</p><p>十分感谢你的精彩发言。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="目录"><span id="0">目录</span><a class="hash-link" href="#目录" title="Direct link to heading">​</a></h2><ul><li>🍕<a href="#1">关于 (#1)</a></li><li>🌭<a href="#2">具体安排 (#2)</a></li><li>🍔<a href="#3">考核内容 (#3)</a></li><li>🍿<a href="#4">结语 (#4)</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="关于-1"><span id="1">关于 (#1)</span><a class="hash-link" href="#关于-1" title="Direct link to heading">​</a></h2><p>刚上大学是不是感觉很开心 😘，欢迎大家来到桂电，作为你们的学长我很荣幸当你们的指路人，我将以我的经历来为大家聊聊基地：</p><p>依稀记得，那是 2019 年的夏天，一位少年背上书包，带着满腔的热血，踌躇满志地走向运方，刚来大学的他，不知道该说些什么，不知道该做些什么，那位少年只记得自己四处寻找社团，但都一一碰壁，最后他选择了基地，这个决定改变了他的四年。</p><p>刚刚来到基地的他，发现周围没有老师，只有一些学长学姐，在基地没有老师，没有教科书，没有教材，四下打听才知道原来一切都得靠<strong>自学</strong>，没错，这就是基地，基地的每位同学都是靠自学，找好自己的方向，在网上找本不错的教材 📕 就可以自学了，这样的学习可能让刚上大学的你不太适应，但必须认识到这才是生活常态，适应不了就努力适应，这是谁都没办法绕过的门槛。</p><p>后来他慢慢地接了些项目，做了网页， 弄了小程序，搞起软著，玩起了比赛，翻译了文档 ，做起了项目，他变得骄傲 ，越来越不受控制 ，他不喜欢数学，他的兴趣不在这，也不听取他人的意见，最后自食其果学分绩一落千丈， 在被父母训话的那个晚上， 他彻夜未眠 ，想起来了在北高读高三时被班主任缴到手机后班主任说的话：“不要带手机来学校，你可能看不清楚自己，可我呢，清楚的很啊，你缺乏自制力，你没人监督肯定控制不了自己”，他当年对这句话不屑一顾，认为班主任小看了自己 ，可结果却是他确实高估了自己 ，<strong>兴趣只是决定你能在这条路上走多远，而无关你学得好与坏。</strong></p><p>最近也在回问自己，时间去哪了？生活和学习都是忙碌的，总是四点一线，教室、宿舍、基地、食堂，除了这几个地方好像他哪也不去，可是时间还是过得很快，写完作业敲完代码，很快就要睡觉了，他其实想拥有更多的时间好去做一些自己想做的事情。</p><p>看着基地，看着基地主页，看着基地服务器......随着时间一点过去，负责人这个角色愈演愈入戏，如今真的意识到了自己已然是一位负责人，身上兼受着满满的爱意和尊敬，以及责任。</p><p>每次看一遍基地前前负责人写的文章，每次都有不同的收获，在我的认知中阶段性的“看”有三次：第一遍看是在文章发布的时候看的，看得一知半解，懵懵懂懂，第二遍是在当上负责人的时候，上面东西显然已经知道了，但没细看，没掌握一些具体的要求，第三遍看就在前一个小时 🤔，感触很深，只感觉<strong>当时如果能看懂，提升不是一点半点了</strong>。</p><p>过去几年里，我经历了两次蜕变，一次是高中四年，走出了羞涩的少年；第二次是大学这两年，让我学会了思考，学会了用自己的方式去看这个世界。我为自己过去的变化而感到自豪，同时也因为这种自豪而感到羞愧，借用“Barret 李靖”的话——<strong>需要摸索的东西还有很多，需要改变的东西也还有很多，今天只不过是一个新的起点。</strong></p><p>说了那么多也该给大家总结经验和教训了，人生路漫漫，其实大家在大学这个阶段真正重要的事情就两件 S 和 S(大部分人来说)</p><ul><li><p>(必修) S:学习(Study), 这门课可谓是相当重要，选好一个方向坚持下去干个 3~4 年，你绝对不会亏！！！,在自己专业的课不能落下，学长学分绩不是很好，在这方面吃了不少亏，你们要以<strong>学业为重！！！</strong></p></li><li><p>(选修) S:社交(Social), 这门课看各位大佬的情商，努力拓宽自己的人脉关系。 多认识点人看看别人的水平和自己的水平做做对比。</p></li></ul><p>还有一些大学生要掌握的东西，例如善用工具 🔨(习惯使用搜索工具、善用网上资源等等)，太多了，各位自行掌握吧~~</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="具体安排-2"><span id="2">具体安排 (#2)</span><a class="hash-link" href="#具体安排-2" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="时间表-">时间表 🗓<a class="hash-link" href="#时间表-" title="Direct link to heading">​</a></h3><p>大致如下安排，如果遇上某些突发状况，例如校运会，就将所有事件往后推迟，事件顺序不能改变(必须在前一个事件发生完，才到下一个事件)。</p><table><thead><tr><th>时间</th><th align="center">事件</th><th align="center">内容</th><th align="right">进度</th></tr></thead><tbody><tr><td>2021 年 09 月 12 日星期日</td><td align="center">招新宣讲会</td><td align="center">跟 21 级新生见面，宣传基地</td><td align="right">✔</td></tr><tr><td>2021 年 09 月 18 日星期六</td><td align="center">面试</td><td align="center">面试 21 级新生</td><td align="right">✔</td></tr><tr><td>2021 年 09 月 25 日星期六 (19:30~21:30)</td><td align="center">第一次培训</td><td align="center">C语言的基础知识</td><td align="right">✔</td></tr><tr><td>2021 年 10 月 9 日星期六 (19:30~21:30)</td><td align="center">作品展示</td><td align="center">20级基地成员展示作品</td><td align="right">✔</td></tr><tr><td>2021 年 10 月 16 日星期六 (19:30~21:30)</td><td align="center">第二次培训</td><td align="center">选择结构</td><td align="right">✔</td></tr><tr><td>2021 年 10 月 23 日星期六 (19:30~21:30)</td><td align="center">第三次培训</td><td align="center">循环结构</td><td align="right">✔</td></tr><tr><td>2021 年 10 月 30 日星期六 (19:30~21:30)</td><td align="center">第四次培训</td><td align="center">数组</td><td align="right">✔</td></tr><tr><td>2021 年 11 月 6 日星期六 (19:30~22:00)</td><td align="center">考核</td><td align="center">最终考核</td><td align="right">❌</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_mojV" id="考核内容-3"><span id="3">考核内容 (#3)</span><a class="hash-link" href="#考核内容-3" title="Direct link to heading">​</a></h2><p>关于考核内容考虑到各位的水平参差不齐，本次就以 C 语言为考核语言，也不需要高超的算法能力，也不需要敲代码的天赋，只需要一颗想学习的心。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="考核平台">考核平台<a class="hash-link" href="#考核平台" title="Direct link to heading">​</a></h3><ul><li>本次考核的平台使用<a href="https://www.nowcoder.com/" target="_blank" rel="noopener noreferrer">牛客网</a>，大家先注册账号并且熟悉考试环境，以免大家对环境陌生。🎉</li><li>没有电脑的同学可以使用基地的电脑(地址：四创中心 1 栋 301)，没有书的同学也可以上来借。🎃</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="一些练习题库">一些练习题库<a class="hash-link" href="#一些练习题库" title="Direct link to heading">​</a></h3><ul><li>HANGZHOU DIANZI UNIVERSITY Online Judge (杭电 oj)👉<a href="http://acm.hdu.edu.cn/" target="_blank" rel="noopener noreferrer">点我访问</a>👈</li><li>luogu Online Judge （洛谷）👉<a href="https://www.luogu.com.cn" target="_blank" rel="noopener noreferrer">点我访问</a>👈</li><li>leetcode （力扣&lt;中国站&gt;）👉<a href="https://leetcode-cn.com/" target="_blank" rel="noopener noreferrer">点我访问</a>👈</li><li>PEKING UNIVERSITY JudgeOnline （北大 oj）👉<a href="http://poj.org/" target="_blank" rel="noopener noreferrer">点我访问</a>👈</li></ul><p>就先这些吧！！🎈🎈</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="考核算法细则">考核算法细则<a class="hash-link" href="#考核算法细则" title="Direct link to heading">​</a></h3><ul><li>你的最终成绩以平时分(30%)+考核分(70%)组成</li></ul><ul><li>平时分(30%)</li></ul><table><thead><tr><th>内容</th><th>分数</th></tr></thead><tbody><tr><td>面试签到</td><td>10 分</td></tr><tr><td>面试奖励分</td><td>10 分</td></tr><tr><td>第一次培训签到</td><td>10 分</td></tr><tr><td>第一次作业完成</td><td>10 分</td></tr><tr><td>第二次培训签到</td><td>10 分</td></tr><tr><td>第二次作业完成</td><td>10 分</td></tr><tr><td>第三次培训签到</td><td>10 分</td></tr><tr><td>第三次作业完成</td><td>10 分</td></tr><tr><td>第四次培训签到</td><td>10 分</td></tr><tr><td>第四次作业完成</td><td>10 分</td></tr><tr><td></td><td>共计 100 分</td></tr></tbody></table><ul><li>考核分(70%)</li></ul><p><strong>目前可公开情报</strong>：考核题目不仅仅只考算法，也考一些基础题</p><table><thead><tr><th>内容</th><th>分数</th></tr></thead><tbody><tr><td>最终考核</td><td>100 分</td></tr><tr><td></td><td>共计 100 分</td></tr></tbody></table><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="结语-4"><span id="4">结语 (#4)</span><a class="hash-link" href="#结语-4" title="Direct link to heading">​</a></h2><p>各位大佬，希望你们都能得到令自己满意的成绩！！！</p><p>加油！！！</p>]]></content:encoded>
            <category>blog</category>
            <category>招新</category>
        </item>
        <item>
            <title><![CDATA[20级秋季考核要点&指南]]></title>
            <link>https://beiliutvstation.github.io/blog/The Key points and guidelines of grade 20 autumn assessment</link>
            <guid>The Key points and guidelines of grade 20 autumn assessment</guid>
            <pubDate>Thu, 17 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[一些话]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="一些话">一些话<a class="hash-link" href="#一些话" title="Direct link to heading">​</a></h2><p>Hello~ 我是不干人事的Tanger，首先欢迎你阅读我的文章
😀，也很期待各位大佬的指正，如果对这篇文章感兴趣的话
，不妨收藏一下⭐本页面，如果有什么想对作者说的话可以
通过两种方式联系作者：</p><ul><li><p>简单粗暴法：直接在下方的评论区留言🎈。(这种方式可能作者回复较慢)</p></li><li><p>花里胡哨法：打开邮箱，发送你的留言至作者的邮箱(<a href="mailto:1907065810@qq.com" target="_blank" rel="noopener noreferrer">1907065810@qq.com</a>)我会在第一时间回复你。✨</p></li></ul><p>十分感谢你的精彩发言。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="目录"><span id="0">目录</span><a class="hash-link" href="#目录" title="Direct link to heading">​</a></h2><ul><li>🍍<a href="#1">关于 </a> (#1)</li><li>🥥<a href="#2">考核内容</a> (#2)</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="关于"><span id="1">关于</span><a class="hash-link" href="#关于" title="Direct link to heading">​</a></h2><p>你们是否听说过基地，你们是否从同年级同学的口中听说过这个地方，对没错，就是这个组织，我们有固定的场所，有固定的办公室，基地也有各种设施供所有基地的成员享用，对于刚刚上大一的你们偷偷告诉你们一个秘密：你们正在和自己身边的同学逐渐拉开距离，可能你们的感受现在还不是很强烈，而我作为一名大二的同学，已经从不少的大四学长的口中得知他们眼中的懊悔，可惜自己大学四年没有好好学东西📕，没有好好谈一场轰轰烈烈的恋爱💕，导致大学四年下来感觉除了岁数在增长其他方面没什么长进，其实大学要做好的事情无外乎两件事S和L(对于绝大多数同学而言)：</p><ul><li><p>(必修) S:学习(Study)，✏朝着提升自己的本领出发：好好学习掌握一门知识📚或者一项吃饭的本领🔨(选择一个方向埋头苦干个3-4年，你真的不会亏🚀)</p></li><li><p>(选修) L:爱情(Love)朝着提升自己的社交水平和丰富经历出发：好好谈一场恋爱，试一试爱一个人的感觉或者被一个人爱的滋味。(在大学有一个男女朋友真的可以教会你很多很多东西，无论最后结果怎么样，你都会在这一过程中成长不少⭐)。</p></li></ul><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="考核内容"><span id="2">考核内容</span><a class="hash-link" href="#考核内容" title="Direct link to heading">​</a></h2><p>关于考核内容考虑到各位的水平参差不齐，以及刚刚学过C语言，基于这两点，我想到了一些较为公平的考核手法，也不需要高超的算法能力，也不需要敲代码的天赋，只需要一颗想学习的心。</p><p>这次我们玩点意思的，主题名为：“CSAR”</p><ul><li><p>(必修) C: 创造(Create)🔨,用hexo+github去搭建一个属于自己的博客，注意这个博客，到后面要用到，这里我们推荐文档👉<a href="https://blog.csdn.net/qq_36759224/article/details/82121420?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.edu_weight" target="_blank" rel="noopener noreferrer">《使用 Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】》</a>👈，如果还是不会怎么办?别担心🙂，我们为各位准备了一节<strong>直播课</strong>在本周的星期六2021年6月19日，来不及看的同学可以看回放🎞。</p><p>&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- -->&nbsp;<!-- -->   以下选修内容只可通过文章的形式在博客中展示，意味着你必须掌握Markdown语法，和一些写文章技巧   &gt;&gt;</p></li><li><p>(选修) S：分享(Share)📚，写一篇文章，分享你进入大学到现在的学习感悟或者分享你的技术学习路线。
例如：《学习Markdown的所思所想》、《JavaScript深入浅出》等等。</p></li><li><p>(选修) A：算法(Algorithms)，🖊做一道中等难度及以上的算法题或者学习一个有难度的算法，写下你
的解题思路（多个）、想法、算法原理，把文章分享出来，文章可发表你的个人博客</p></li><li><p>(选修) R：阅读(Read)👀，读一篇有深度的技术文章或者读一本科普书（比如人类简史），写下你的感悟，同样的把你的感悟以文章的形式分享出来</p></li></ul><p>从上述选修内容中选择两到三个写出相关文章发表到你的博客上，并将<strong>你的博客地址</strong>提交到👉<a href="https://github.com/seven-innovation-base/attendence-sheet-/issues/1" target="_blank" rel="noopener noreferrer">《20级秋季招新签到表》</a>👈(看例子填)，多说两句：希望你们能明确方向，不要乱动。多多动手实践，引用耗子叔的一句话：<strong>有些东西你需要亲身经历和体会才知道，而不是光听别人怎么说。</strong></p><p>相信你们通过日积月累的学习，会受益良多，考虑到各位最近有很多考试，我就将考核调整到这个月月底2021年6月30日。(你们一定有空)</p><p>祝你们考试顺利！！！🌹🌹🌹</p><p><a href="#0">↑ 返回目录 ↑</a></p>]]></content:encoded>
            <category>blog</category>
            <category>招新</category>
        </item>
        <item>
            <title><![CDATA[央视《地理中国》专题记录片在北流开拍！]]></title>
            <link>https://beiliutvstation.github.io/blog/dilizhongguo</link>
            <guid>dilizhongguo</guid>
            <pubDate>Thu, 20 May 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[时间、地点、人物和事情]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="时间地点人物和事情">时间、地点、人物和事情<a class="hash-link" href="#时间地点人物和事情" title="Direct link to heading">​</a></h2><p>时间🕒：2021年5月20日</p><p>中央电视台科教频道(CCTV10)《地理中国》</p><p>栏目组一行4人抵达北流</p><p>开始为期12天的专题纪录片拍摄</p><p><img loading="lazy" src="https://nimg.ws.126.net/?url=http%3A%2F%2Fdingyue.ws.126.net%2F2021%2F0522%2F5de650e8j00qtiiwz001jd200jg00elg00it00e3.jpg&amp;thumbnail=750x2147483647&amp;quality=75&amp;type=webp" class="img_E7b_"></p><p>栏目组与北流市委宣传部及专家学者共同研讨完善拍摄方案。</p><p><img loading="lazy" src="https://nimg.ws.126.net/?url=http%3A%2F%2Fdingyue.ws.126.net%2F2021%2F0522%2Fa1ba9f70j00qtiix00018d200jg00ayg00it00al.jpg&amp;thumbnail=750x2147483647&amp;quality=75&amp;type=webp" class="img_E7b_"></p><p>栏目组在北流市博物馆取景铜鼓。</p><p>栏目组经过前期在玉林的踩点情况进行调研评估，最终选择在北流进行拍摄。专题纪录片以北流得天独厚的自然地理景观为线索，贯穿北流的历史文化、民风民俗、美食文化等人文地理资源，将北流丰富多彩的自然地理和人文地理资源进行疏理整合，呈现出大美北流的全景式拍摄。</p><p><img loading="lazy" src="https://nimg.ws.126.net/?url=http%3A%2F%2Fdingyue.ws.126.net%2F2021%2F0522%2Fef57aa9fj00qtiix0001zd200jg00elg00it00e3.jpg&amp;thumbnail=750x2147483647&amp;quality=75&amp;type=webp" class="img_E7b_"></p><p>讨论进洞拍摄方案。</p><p><img loading="lazy" src="https://nimg.ws.126.net/?url=http%3A%2F%2Fdingyue.ws.126.net%2F2021%2F0522%2Fa3e571ccj00qtiix1003ed200jg00elg00it00e3.jpg&amp;thumbnail=750x2147483647&amp;quality=75&amp;type=webp" class="img_E7b_"></p><p>野外拍摄。</p><p>CCTV-10《地理中国》是一档揭秘自然地理、人文地理演变奥秘的日播纪录片栏目，以地质科考为线索，普及地理学知识为宗旨，介绍地质学的新发现、新成果、新探索，展示地质地貌的新、奇、特、美。栏目在带着观众感受大自然神奇魅力的同时，传播科学知识，倡导热爱自然，珍惜自然，并传播人与自然和谐共生、相互依存的理念。</p>]]></content:encoded>
            <category>日常</category>
        </item>
        <item>
            <title><![CDATA[Markdown之系列精讲🎈✨]]></title>
            <link>https://beiliutvstation.github.io/blog/The things of markdown</link>
            <guid>The things of markdown</guid>
            <pubDate>Sun, 16 May 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[一些话]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="一些话">一些话<a class="hash-link" href="#一些话" title="Direct link to heading">​</a></h2><p>Hello~ 我是不干人事的Tanger，首先欢迎你阅读我的文章😀，也很期待各位大佬的指正，如果对这篇文章感兴趣的话，不妨收藏一下⭐本页面，如果有什么想对作者说的话可以通过两种方式联系作者：</p><ul><li><p>简单粗暴法：直接在下方的评论区留言🎈(这种方式可能作者回复较慢)</p></li><li><p>花里胡哨法：打开邮箱，发送你的留言至作者的邮箱(<a href="mailto:1907065810@qq.com" target="_blank" rel="noopener noreferrer">1907065810@qq.com</a>)我会在第一时间回复你✨</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="关于">关于<a class="hash-link" href="#关于" title="Direct link to heading">​</a></h2><p>这篇文章并无什么用😂，主要是我老不记得Markdown语法老是上网找，诶，这可能就是菜吧，所以我打算自己写一篇Markdown语法总结出来就很nice😀</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="目录"><span id="0">目录</span><a class="hash-link" href="#目录" title="Direct link to heading">​</a></h3><ul><li>😁 <a href="#1">Markdown精讲之文章头部</a></li><li>😀 <a href="#2">Markdown精讲之标题</a></li><li>😂 <a href="#3">Markdown精讲之段落</a></li><li>🤣 <a href="#4">Markdown精讲之区块引用</a></li><li>😃 <a href="#5">Markdown精讲之代码区块</a></li><li>😄 <a href="#6">Markdown精讲之强调</a></li><li>😅 <a href="#7">Markdown精讲之列表</a></li><li>😆 <a href="#8">Markdown精讲之分割线</a></li><li>😋 <a href="#9">Markdown精讲之链接</a></li><li>😎 <a href="#10">Markdown精讲之图片</a></li><li>🙂 <a href="#11">Markdown精讲之反斜杆<!-- -->\</a></li><li>🤔 <a href="#12">Markdown精讲之符号'`'</a></li><li>😘 <a href="#13">最后的最后：鸣谢</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="-markdown精讲之文章头部-1-"><span id="1"> Markdown精讲之文章头部 <!-- -->#<!-- -->1 </span><a class="hash-link" href="#-markdown精讲之文章头部-1-" title="Direct link to heading">​</a></h2><p>一篇好的Markdown文章最好将头部的打得清楚一点，在我们创造一篇新的文章时会是这样的，如下所示&gt;&gt;</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">---</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">layout: Tanger的思源地</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">title: new article</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">date: 2021-05-15 13:13:29</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">tags:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">---</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>上面所显示的就是一篇文章在初始化的时候，下面让我们来解读一下，为什么会出现这些信息，其实这些信息是根据用户已经给定的一些信息，例如：</p><p>由于笔者使用的是hexo来写博客的，我在hexo的根目录中配置了以下信息：</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain"># Writing</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">new_post_name: :title.md # File name of new posts</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">default_layout: Tanger的思源地</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">titlecase: false # Transform title into titlecase</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">external_link:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">enable: true # Open external links in new tab</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">field: site # Apply to the whole site</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">exclude: ''</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">filename_case: 0</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">render_drafts: false</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">post_asset_folder: ture</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">relative_link: false</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">future: true</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">highlight:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">enable: true</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">line_number: true</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">auto_detect: false</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">tab_replace: ''</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">wrap: true</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">hljs: true</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>所以我在写每篇文章的时候都，在layout那一行都会默认是"Tanger的思源地"😁</p><p>而为什么title为什么会出现“new article”是因为笔者在初始化的时候在根目录下输入</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">hexo new "new article"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>所以在title就出现“new article”</p><p>下面就是Markdown文件的完整的头部，可以对照下表加入自己想加入的东西😘😘</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">---</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">layout: 作者名</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">title: 文章标题</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">date: 文章日期 #例如2020/01/01</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">author: 作者名称</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">cover: #true or false</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">top: #true or false</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">toc: #标签 true or false</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">img: /medias/featureimages/1.jpg #文章封面图片</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">coverImg: /medias/featureimages/0.jpg</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">mathjax: #true or false</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">summary: #这是自定义的摘要内容</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">categories: 博客</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">tags:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">- 标签一</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">- 标签二</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">---</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    （在&lt;!--more--&gt;上面的文字、图片都是可以实现预览的）</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     &lt;!--more--&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     内容（省略一万字）</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>（具体的要看主题文档说明）</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="-markdown精讲之标题-2"><span id="2"> Markdown精讲之标题 <!-- -->#<!-- -->2</span><a class="hash-link" href="#-markdown精讲之标题-2" title="Direct link to heading">​</a></h2><p>要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了<strong>标题的级别</strong>。例如，添加三个 # 表示创建一个三级标题 (<code>&lt;h3&gt;</code>) (例如：### My Header)。😘</p><table><thead><tr><th>Markdown语法</th><th align="center">HTML</th><th align="right"><view align="center">预览效果</view></th></tr></thead><tbody><tr><td># 一级标题</td><td align="center"><code>&lt;h1&gt;</code>一级标题 <code>&lt;/h1&gt;</code></td><td align="right"><view align="center"> <h1>一级标题</h1> </view></td></tr><tr><td># 二级标题</td><td align="center"><code>&lt;h2&gt;</code>二级标题 <code>&lt;/h2&gt;</code></td><td align="right"><view align="center"> <h2>二级标题</h2> </view></td></tr><tr><td># 三级标题</td><td align="center"><code>&lt;h3&gt;</code>三级标题 <code>&lt;/h3&gt;</code></td><td align="right"><view align="center"> <h3>三级标题</h3> </view></td></tr><tr><td># 四级标题</td><td align="center"><code>&lt;h4&gt;</code>四级标题 <code>&lt;/h4&gt;</code></td><td align="right"><view align="center"> <h4>四级标题</h4> </view></td></tr><tr><td># 五级标题</td><td align="center"><code>&lt;h5&gt;</code> 五级标题 <code>&lt;/h5&gt;</code></td><td align="right"><view align="center"> <h5>五级标题</h5> </view></td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_mojV" id="补充">补充：<a class="hash-link" href="#补充" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_mojV" id="一些不常用的写法">一些不常用的写法<a class="hash-link" href="#一些不常用的写法" title="Direct link to heading">​</a></h4><p>例如：
一级标题
=========
二级标题</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">---------</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h1>一级标题</h1><h2>二级标题</h2><p>一些废话&gt;&gt;</p><p>要合理使用文章的标题，比如最好别老是使用一级标题最好别老是使用一级标题最好别老是使用一级标题，重要的话说三次，因为一级标题在页面自定义生成的目录中，可能会导致目录紊乱，在文章里面就使用二级标题+三级标题就已经完完全全够用了，所以最好别用三级标题😁。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="markdown精讲之段落-3"><span id="3">Markdown精讲之段落 <!-- -->#<!-- -->3</span><a class="hash-link" href="#markdown精讲之段落-3" title="Direct link to heading">​</a></h2><p>这节内容非常短，只需要学会一个操作就行了，要想创造出段落的效果，只需在回车空格就行了</p><p>例如：</p><p>Markdown:</p><p>我是一个段落</p><p>我是一个段落</p><p>Html:</p><p>\</p><p>我是一个段落\</p>\<p>我是一个段落\</p><p></p><p>他们的实际效果一致。</p><p>段落这节到此结束🆗，欢迎学习下一章</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="markdown精讲之区块引用-4"><span id="4">Markdown精讲之区块引用 <!-- -->#<!-- -->4</span><a class="hash-link" href="#markdown精讲之区块引用-4" title="Direct link to heading">​</a></h2><p>这一章将学习如何去使用区块引用，和代码区块(请关注下一章)不同的是，区块引用并不常用，但也并非不用，一些人还会喜欢将自己认为重要的东西引用起来。</p><p>例如：</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">&gt; 前端学习</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">&gt;&gt; 前端三大件</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">&gt;&gt;&gt;Html</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">&gt;&gt;&gt;JavaScript</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">&gt;&gt;&gt;CSS</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><blockquote><p>前端学习</p><blockquote><p>前端三大件</p><blockquote><p>Html
JavaScript
CSS</p></blockquote></blockquote></blockquote><p>值得注意的是：引用并非像你的标题那样如此的好用，引用的这些特性决定了它并不能像标题一样如此突出，只能在正文中显得稍微显眼一点。</p><p>区块引用就先告一段落，欢迎进入下一章的学习。</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="markdown精讲之代码区块-5"><span id="5">Markdown精讲之代码区块 <!-- -->#<!-- -->5</span><a class="hash-link" href="#markdown精讲之代码区块-5" title="Direct link to heading">​</a></h2><p> 本章将为各位同学介绍的是代码区块，与上面的区块引用虽然看上去很相近，实则大相径庭，代码区块常常被使用在作者想将代码表现在自己的文章例如：</p><p>直接打：</p><p>#include&lt;bits/stdc++.h&gt;</p><p>using namespace std;</p><p>int main(){</p><p>cout&lt;&lt;"Hello World!"&lt;&lt;endl;</p><p>return 0;</p><p>}</p><p>我认为这样会很不美观而且出现的方式也很突兀，无论是在页面整体结构上，还是从美观的角度上分析都不会让人觉得这是一篇好文章。</p><p>使用代码引用：</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">#include&lt;bits/stdc++.h&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">using namespace std;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">int main(){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    cout&lt;&lt;"Hello World!"&lt;&lt;endl;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    return 0;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>这样就显得好看许多了!!!</p><p>欢迎学习下一节《Markdowm精讲之强调》</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="-markdown精讲之强调-6"><span id="6"> Markdown精讲之强调 <!-- -->#<!-- -->6</span><a class="hash-link" href="#-markdown精讲之强调-6" title="Direct link to heading">​</a></h2><p>本节将学习强调，强调有三种，一、是加粗 二、是斜体 三、是删除线 使用起来非常简单，下面将演示一下</p><p>例如：</p><table><thead><tr><th>Markdown语法</th><th align="center">HTML</th><th align="right"><view align="center">预览效果</view></th></tr></thead><tbody><tr><td>_<!-- -->_<!-- -->加粗<!-- -->_<!-- -->_</td><td align="center">\<div>加粗 \</div></td><td align="right"><div>加粗</div></td></tr><tr><td>*<!-- -->*<!-- -->加粗<!-- -->*<!-- -->*</td><td align="center">\<div>加粗 \</div></td><td align="right"><view align="center"> <div>加粗</div> </view></td></tr><tr><td>_<!-- -->斜体<!-- -->_</td><td align="center">\<i>斜体 \</i></td><td align="right"><view align="center"> <i>斜体</i> </view></td></tr><tr><td><em>斜体</em></td><td align="center">\<i>斜体\</i></td><td align="right"><view align="center"> <i>斜体</i> </view></td></tr><tr><td><del>删除线</del></td><td align="center">\<s>删除线 \</s></td><td align="right"><view align="center"> <s>删除线</s> </view></td></tr></tbody></table><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="-markdown精讲之列表-7"><span id="7"> Markdown精讲之列表 <!-- -->#<!-- -->7</span><a class="hash-link" href="#-markdown精讲之列表-7" title="Direct link to heading">​</a></h2><p>本节学习的是Markdown中的列表，在Markdown中可以用*、+、-来标记列表，这些符号后面最少有一个<em>空格</em>或<em>制表符</em>。若不在引用区块中，必须和前方段落之间存在空行。是这些都可以使用，同样也非常的简单</p><p>例如：</p><p>*<!-- --> 第一点
<!-- -->*<!-- --> 第二点
<!-- -->*<!-- --> 第三点</p><p>效果</p><ul><li>第一点</li><li>第二点</li><li>第三点</li></ul><p>下一节将介绍分割线</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="-markdown精讲之分割线-8"><span id="8"> Markdown精讲之分割线 <!-- -->#<!-- -->8</span><a class="hash-link" href="#-markdown精讲之分割线-8" title="Direct link to heading">​</a></h2><p>分割线最常使用就是三个或以上*，还可以使用-和_。</p><p>例如：</p><p>*<!-- -->*<!-- -->*</p><p>-<!-- -->-<!-- -->-</p><p>_<!-- -->_<!-- -->_</p><p>效果：</p><hr><hr><hr><p>下节介绍链接</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="-markdown精讲之链接-9"><span id="9"> Markdown精讲之链接 <!-- -->#<!-- -->9</span><a class="hash-link" href="#-markdown精讲之链接-9" title="Direct link to heading">​</a></h2><p>链接可以由两种形式生成：行内式和参考式。</p><p>例如：</p><p>行内式：</p><table><thead><tr><th>Markdown语法</th><th align="center">HTML</th><th align="right"><view align="center">预览效果</view></th></tr></thead><tbody><tr><td>[<!-- -->Tanger的Github主页<!-- -->]<!-- -->(<a href="https://github.com/redhat123456%5C" target="_blank" rel="noopener noreferrer">https://github.com/redhat123456\</a>)</td><td align="center">\<a herf="https://github.com/redhat123456">\</a></td><td align="right"><a href="https://github.com/redhat123456" target="_blank" rel="noopener noreferrer">Tanger的Github主页</a></td></tr></tbody></table><p>参考式：</p><p><a href="https://github.com/redhat123456" target="_blank" rel="noopener noreferrer" title="Markdown">Tanger的Github主页1</a></p><p><a href="https://github.com/redhat123456" target="_blank" rel="noopener noreferrer" title="Markdown">Tanger的Github主页2</a></p><p>[<!-- -->1<!-- -->]<!-- -->:<a href="https://github.com/redhat123456" target="_blank" rel="noopener noreferrer">https://github.com/redhat123456</a> "Markdown"</p><p>[<!-- -->2<!-- -->]<!-- -->:<a href="https://github.com/redhat123456" target="_blank" rel="noopener noreferrer">https://github.com/redhat123456</a> "Markdown"</p><p>效果：</p><p><a href="https://github.com/redhat123456" target="_blank" rel="noopener noreferrer" title="Markdown">Tanger的Github主页1</a></p><p><a href="https://github.com/redhat123456" target="_blank" rel="noopener noreferrer" title="Markdown">Tanger的Github主页2</a></p><p>下节将介绍图片在Markdown中的使用</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="-markdown精讲之图片-10"><span id="10"> Markdown精讲之图片 <!-- -->#<!-- -->10</span><a class="hash-link" href="#-markdown精讲之图片-10" title="Direct link to heading">​</a></h2><p>这节介绍Markdown中图片的使用，添加图片的形式和链接相似，只需在链接的基础上前方加一个!</p><p>⚠⚠ 唠叨两句：所有图片的地址都必须是互联网上的。</p><p>例如：</p><p>Markdown：</p><p>!<!-- -->[<!-- -->]<!-- -->(<a href="https://ak.hypergryph.com/upload/images/20200703/271c7b47625b6544a1df8220e375f240.jpg%5C%22%22" target="_blank" rel="noopener noreferrer">https://ak.hypergryph.com/upload/images/20200703/271c7b47625b6544a1df8220e375f240.jpg\""</a>)</p><p>效果：</p><p><img loading="lazy" src="https://ak.hypergryph.com/upload/images/20200703/271c7b47625b6544a1df8220e375f240.jpg" class="img_E7b_"></p><p>请关注下一节，《Markdown精讲之反斜杆》</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="-markdown精讲之反斜杆--11"><span id="11"> Markdown精讲之反斜杆\  <!-- -->#<!-- -->11</span><a class="hash-link" href="#-markdown精讲之反斜杆--11" title="Direct link to heading">​</a></h2><p>这节课介绍反斜杠\,相当于反转义作用。使符号成为普通符号。</p><p>例如：</p><p>上面的所有文章都是活生生的例子。</p><p>请关注下一节，Markdown精讲之符号'`'</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="-markdown精讲之符号-12"><span id="12"> Markdown精讲之符号'`' <!-- -->#<!-- -->12</span><a class="hash-link" href="#-markdown精讲之符号-12" title="Direct link to heading">​</a></h2><p>这节课讲'`'起到标记作用,相当于小一点的代码区块。</p><p>例如：
<!-- -->`<!-- -->ctrl+a<!-- -->`<!-- -->
效果:
<code>ctrl+a</code></p><p>以上基本是所有<strong>traditonal</strong> markdown的语法。</p><p>结束了，撒花🎉🎉🎉</p><p><a href="#0">↑ 返回目录 ↑</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="最后的最后一些话以及鸣谢-13"><span id="13">最后的最后：一些话以及鸣谢 <!-- -->#<!-- -->13</span><a class="hash-link" href="#最后的最后一些话以及鸣谢-13" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="谁在用">谁在用？<a class="hash-link" href="#谁在用" title="Direct link to heading">​</a></h3><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit
等等</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="尝试一下">尝试一下<a class="hash-link" href="#尝试一下" title="Direct link to heading">​</a></h3><ul><li>Chrome下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。</li><li>在线的dillinger.io评价也不错</li><li>Windowns下的MarkdownPad也用过，不过免费版的体验不是很好。</li><li>Mac下的Mou是国人贡献的，口碑很好。</li><li>Linux下的ReText不错。</li></ul><hr><p>注意：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。 虽然有人想出面搞一个所谓的标准化的Markdown，<!-- -->[没想到还惹怒了健在的创始人John Gruber]<!-- --> (<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener noreferrer">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><h3 class="anchor anchorWithStickyNavbar_mojV" id="鸣谢">鸣谢<a class="hash-link" href="#鸣谢" title="Direct link to heading">​</a></h3><ul><li>引用：<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener noreferrer">https://github.com/younghz/Markdown</a></li></ul><p>感谢以上的文章，让我能够参考写完这篇，谢谢非常谢谢!!!✨✨</p><p><a href="#0">↑ 返回目录 ↑</a></p>]]></content:encoded>
            <category>blog</category>
            <category>markdown</category>
        </item>
        <item>
            <title><![CDATA[Hexo博客搭建那些事儿，考核系列相关文章-1]]></title>
            <link>https://beiliutvstation.github.io/blog/things of hexo blog building</link>
            <guid>things of hexo blog building</guid>
            <pubDate>Tue, 21 Jul 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[博客考核任务发布之后有同学问了各种各样的问题，（趁着大家基本考完试了）发篇博文略微总结下。]]></description>
            <content:encoded><![CDATA[<p>博客考核任务发布之后有同学问了各种各样的问题，（趁着大家基本考完试了）发篇博文略微总结下。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="说说我们的感受">说说我们的感受<a class="hash-link" href="#说说我们的感受" title="Direct link to heading">​</a></h2><p>我们发现有不少同学的问问题方式还是有一定的问题的。部分同学提供的信息不够精确，比如：</p><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/ssmath/picgo-pic/img/20200721221345.png" alt="问题信息不清" class="img_E7b_"></p><p>这个同学一开始问了个：hexo 源的问题怎么解决？
其实第一眼看到这条信息，我们是无法真正确定你遇到的问题的。而且这个用词也有一定的问题，「hexo源？」，这位同学想说的是 npm 源吧。而且，这位同学一开始并没有提供截图说明他的问题，这是一个很不好的习惯『一般情况下，软件/程序出错都会有错误信息提示，这部分内容可以提供给我们』。问问题时，说明遇到的问题和给出提示信息图是很重要的，可以帮助被提问方快速的定位问题。</p><p>不过这位同学能通过搜索先去解决问题还是值得肯定的，只是搜索的姿势好像不太对，把握不住引起问题“要害”-&gt;<code>no such a file or directory xxx package.json</code>。「关注提示信息，这里不得不吐槽的是居然有中文路径，建议尽量不要使用中文路径」</p><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/ssmath/picgo-pic/img/20200721223745.png" alt="no such a file or directory xxx package.json" class="img_E7b_"></p><p>到此，不得不提社区上比较火的一个话题，如下图「当然，我们也不强求所有同学都能做到，扎实成长，慢慢打磨即可」：</p><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/ssmath/picgo-pic/img/20200722015132.png" alt="提问的智慧" class="img_E7b_"></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="从问题中了解到的知识点">从问题中了解到的知识点<a class="hash-link" href="#从问题中了解到的知识点" title="Direct link to heading">​</a></h2><p>正如我们之前那个线上<a href="https://github.com/seven-innovation-base/2020.6-Article-Collection" target="_blank" rel="noopener noreferrer">小讲堂</a>所说：你们问问题，不仅在帮你们，也在帮助我们。你们问问题的同时也在帮助我们更加理解我们之前学的知识「经过时间的洗刷，部分知识并非如我们想象的那般熟悉」。</p><p><strong>OK，接下来谈谈从你们的问题中，我们会有一些怎么样的思考，你们/我们又学到了什么?</strong></p><ul><li>1、从<code>no such a file or directory xxx package.json</code>引申出来的问题。</li></ul><p>之前遇到这个问题的同学可能只想着把博客搭建起来就好了，可能并没有思考这个文件<code>package.json</code>到底是干嘛的，且网上的大部分 Hexo 博客搭建教程并没有提及这个文件存在的意义。</p><p>那么这个文件按到底是干嘛的？其实我们的整个 Hexo 博客，相当于一个轻量级的项目（Node.js Project）。既然是项目就会有依赖，一个有一定规模的项目，肯定会引用各种的第三方 plugins（modules、packages、framework等）。<code>package.json</code>文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。具体可看这里-&gt;<a href="https://javascript.ruanyifeng.com/nodejs/packagejson.html" target="_blank" rel="noopener noreferrer">🔗</a>。</p><p>到这里，我们还会引申出来一个思考，我们<code>hexo init</code>后生成的文件/目录的用途是什么？其实这些东西 Hexo 官网有基本的陈述-&gt;<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener noreferrer">Docs</a>。不得不提的是，我们既然用别人的产品，那么我们遇到问题的时候肯定可以借助产品的社区解决，我们应当多关注一下我们使用的技术产品的技术社区 -&gt; Hexo Framework。很多我们使用过程中遇到的问题基本都能在 <a href="https://hexo.io/docs/troubleshooting" target="_blank" rel="noopener noreferrer">Docs/troubleshooting</a>、<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener noreferrer">github issues</a>中找到解决方案。</p><blockquote><p>值得一提：现在我们可以通过 npx 运行 node_modules 中的 binary/executabl file 了，不用在全局安装某些模块了（npm install -g），具体可了解：<a href="http://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener noreferrer">npx 使用教程</a></p></blockquote><ul><li>2、从 <code>command not found</code> 引发出来的思考-环境变量（environment variables）问题 。</li></ul><p>不得不说，环境变量的问题是值得引起重视的。在以后成长的过程中，我们肯定会因为Java、Maven、Python、GOPATH或生产线上部署项目等各种乱七八糟的东西的<strong>环境变量使用姿势不对</strong>遇到各种小问题。</p><p>先通过实际例子理解一波环境变量，就博客搭建这件事而言，相信会有小部分的同学在博客搭建过程中遇到或<code>npm</code>或<code>git</code>等命令使用不了的情况。这些情况一般是因为没有将与这些命令相关的可执行文件（executable file、binary）加入环境变量中所致。可以拿以下这么一个 C 程序做下比喻：</p><div class="codeBlockContainer_I0IT language-c theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-c codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">//helloworld.c</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="font-style:italic">include</span><span class="token macro property string" style="color:rgb(195, 232, 141)">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">main</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">printf</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"Hello World"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>我们先编译一下这个文件。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">gcc -o hello .</span><span class="token punctuation" style="color:rgb(199, 146, 234)">\</span><span class="token plain">helloworld.c</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>然后执行一下可执行文件，可以看到，我们可以在当前工作目录（工作空间，workspace）执行这个可执行文件是可以的，但是换到另一个 workspace 就不行了。有同学会说，我们使用绝对路径不就好咯。懂得都懂，程序员比较懒。以后想要多次复用程序，总不能每次都打那么长一串吧。这时候环境变量就派上用场了（环境变量还有很多用途）。</p><p>这时候我们可以通过 set 将 hello.exe 所在目录加到环境变量中（Linux 可使用 export）。</p><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/ssmath/picgo-pic/img/20200722211325.png" alt="workspace" class="img_E7b_"></p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token builtin class-name" style="color:rgb(255, 203, 107)">set</span><span class="token plain"> </span><span class="token assign-left variable" style="color:rgb(191, 199, 213)">Path</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">%PAth%</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain">C:</span><span class="token punctuation" style="color:rgb(199, 146, 234)">\</span><span class="token plain">Users</span><span class="token punctuation" style="color:rgb(199, 146, 234)">\</span><span class="token plain">yeshan</span><span class="token punctuation" style="color:rgb(199, 146, 234)">\</span><span class="token plain">Desktop</span><span class="token punctuation" style="color:rgb(199, 146, 234)">\</span><span class="token plain">goxxx</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/ssmath/picgo-pic/img/20200722010700.png" alt="set 设置环境变量" class="img_E7b_"></p><p>这下，可以看到，我们可以不必在 hello.exe 所在的 workspace 才能执行它了。「有那么点 C 语言全局变量和函数局部变量的味道了，但又不完全是」。</p><p>这就完了吗？并没有结束。看下下面这波操作。</p><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/ssmath/picgo-pic/img/gog.png" alt="进程间上下文不一样" class="img_E7b_"></p><p>可以明显看到，通过 set（export）的方式设置的环境变量并不是永久的，还需要做下其它花哨设置才可以，这里不做介绍。我们仅以此做个引申，我们可以继续思考什么？我们可以思考一下这是为什么？</p><p>这是因为两个进程（terminal process）是隔离的，上面那种情况，另一个进程中资源的变化影响不了另一个进程（左边的将 hello.exe 文件的工作目录加入 path 对右边的无效）。那么？terminal 进程的 path 信息从何而来？它从父进程而来，subprocess（子进程）的资源由父进程继承而来「system call -&gt; fork()」。到这里，就应该了解一波操作系统相关的知识了，感兴趣的同学可以看下《现代操作系统》这本书。顺便了解下进/线程模型、进程和线程的区别吧。2333~卢瑟✨✔👍。</p><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/ssmath/picgo-pic/img/20200722014253.png" alt="进、线程资源持有区别" class="img_E7b_"></p><div class="admonition admonition-tip alert alert--success"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</h5></div><div class="admonition-content"><p>这里仅做一个引导，说明我们如何从一个简单问题开始思考，抽丝剥茧，深入了解底层原理。</p></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="引用">引用<a class="hash-link" href="#引用" title="Direct link to heading">​</a></h2><ul><li><a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener noreferrer">How To Ask Questions The Smart Way</a>，<a href="http://tieba.github.io/common/howtoask.html#forum" target="_blank" rel="noopener noreferrer">中文版</a></li><li><a href="https://book.douban.com/subject/27096665/" target="_blank" rel="noopener noreferrer">《现代操作系统》</a></li></ul>]]></content:encoded>
            <category>blog</category>
            <category>question</category>
        </item>
        <item>
            <title><![CDATA[搭建属于自己的博客]]></title>
            <link>https://beiliutvstation.github.io/blog/create-blog</link>
            <guid>create-blog</guid>
            <pubDate>Tue, 14 Jan 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[前言]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="前言">前言<a class="hash-link" href="#前言" title="Direct link to heading">​</a></h2><p>本文给出了几种常见的个人网站（博客）搭建方式的教程资源。官方文档为主，B站视频教程为辅。比较适合喜欢折腾的同学。不喜欢折腾的可以直接使用CSDN博客、博客园、<a href="https://www.yuque.com/yuque" target="_blank" rel="noopener noreferrer"><strong>语雀</strong></a>等提供的服务。<strong>别忘了博客的初心是记录</strong>。</p><p>常见的个人博客、网站、知识库搭建方式如下：</p><p><img loading="lazy" src="https://img.vim-cn.com/f9/975cc8edad012fd6bb712fdbbc2d311d5309a4.png" alt="总结" class="img_E7b_"></p><p>动态管理系统需要使用服务器部署，因为这些系统的数据大都存放在数据库。现今大部分的云服务商（<a href="https://www.alibabacloud.com/zh/campaign/free-trial?spm=a2796.7919406.1389991.dbannerazhfreetrial.5b8c2d23QXhsV9" target="_blank" rel="noopener noreferrer">阿里云</a>、<a href="https://amazonaws-china.com/cn/free/" target="_blank" rel="noopener noreferrer">AWS</a>、<a href="https://cloud.tencent.com/act/free" target="_blank" rel="noopener noreferrer">腾讯云</a>等等）大都提供了一个月甚至一年的服务器试用期。</p><p>依赖静态站点生成器生成的网站不仅可以部署在服务器上，还可以利用一些免费的站点托管服务进行托管，比如<a href="https://pages.github.com/" target="_blank" rel="noopener noreferrer">GitHub</a>、<a href="https://coding.net/help/doc/pages" target="_blank" rel="noopener noreferrer">Coding</a>、<a href="https://coding.net/help/doc/pages" target="_blank" rel="noopener noreferrer">Gitlab</a>等提供的Pages服务和<a href="https://docs.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener noreferrer">Read the Docs</a>的文档托管服务。深入折腾的同学还会接触到一些<a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" target="_blank" rel="noopener noreferrer">CI/CD</a>工具链、<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132?fromtitle=SEO&amp;fromid=102990" target="_blank" rel="noopener noreferrer">SEO</a>技巧等等。</p><p>对于Web开发者，你可能会接触到一些BASS服务提供商，比如<a href="https://www.leancloud.cn/" target="_blank" rel="noopener noreferrer">LeanCloud</a>、<a href="https://www.bmob.cn/" target="_blank" rel="noopener noreferrer">Bmob</a>、<a href="https://firebase.google.com/?hl=zh-cn" target="_blank" rel="noopener noreferrer">firebase</a>。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="热门方式">热门方式<a class="hash-link" href="#热门方式" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="1wordpress搭建个人博客">1.WordPress搭建个人博客<a class="hash-link" href="#1wordpress搭建个人博客" title="Direct link to heading">​</a></h3><p>首先根据维基百科来介绍一下WordPress：</p><blockquote><p><strong>WordPress</strong>是一个以<a href="https://zh.wikipedia.org/wiki/PHP" target="_blank" rel="noopener noreferrer">PHP</a>和<a href="https://zh.wikipedia.org/wiki/MySQL" target="_blank" rel="noopener noreferrer">MySQL</a>为平台的<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E5%8F%8A%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81%E8%BD%AF%E4%BB%B6" target="_blank" rel="noopener noreferrer">自由开源</a>的博客软件和<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreferrer">内容管理系统</a>。WordPress具有插件架构和模板系统。截至2018年4月，排名前1000万的网站中超过30.6%使用WordPress。WordPress是最受欢迎的网站<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreferrer">内容管理系统</a>。WordPress是当前<a href="https://zh.wikipedia.org/wiki/%E5%9B%A0%E7%89%B9%E7%BD%91" target="_blank" rel="noopener noreferrer">因特网</a>上最流行的博客系统。WordPress在最著名的网络发布阶段中脱颖而出。如今，它被使用在超过7000万个站点上。</p></blockquote><p><strong>步骤：</strong></p><ul><li><ol><li>注册域名</li></ol></li><li><ol start="2"><li>创建VPS（虚拟专用服务器，即需要购买服务器）</li></ol></li><li><ol start="3"><li>解析域名</li></ol></li><li><ol start="4"><li>绑定域名</li></ol></li><li><ol start="5"><li>上传配置文件</li></ol></li><li><ol start="6"><li>安装使用</li></ol></li></ul><p><strong>具体详细操作详见如下文档和视频：</strong></p><p><a href="https://wordpress.com/create-blog/" target="_blank" rel="noopener noreferrer">wordpress搭建博客</a></p><p><a href="https://www.jianshu.com/p/d4beb61fc3c0" target="_blank" rel="noopener noreferrer">教你用WordPress搭建一个简单的个人博客</a></p><p><a href="https://www.bilibili.com/video/av9058563/?share_medium=web&amp;share_source=qq&amp;bbid=B8CCEBFD-2865-4967-9C06-001E0279A4A2155809infoc&amp;ts=1578290731898" target="_blank" rel="noopener noreferrer">免费搭建自己的wordpress博客&lt;视频教程&gt;</a></p><p><a href="https://www.bilibili.com/video/av2584946/?share_medium=web&amp;share_source=qq&amp;bbid=B8CCEBFD-2865-4967-9C06-001E0279A4A2155809infoc&amp;ts=1578292142882" target="_blank" rel="noopener noreferrer">使用WordPress搭建博客网站</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="2typecho-搭建个人博客"><strong>2.Typecho 搭建个人博客</strong><a class="hash-link" href="#2typecho-搭建个人博客" title="Direct link to heading">​</a></h3><p>首先介绍一下Typecho：</p><p><strong>Typecho</strong>是一个基于<a href="https://zh.wikipedia.org/wiki/PHP" target="_blank" rel="noopener noreferrer">PHP</a>的简洁的开源博客程序。它使用多种数据库（<a href="https://zh.wikipedia.org/wiki/MySQL" target="_blank" rel="noopener noreferrer">MySQL</a>、<a href="https://zh.wikipedia.org/wiki/PostgreSQL" target="_blank" rel="noopener noreferrer">PostgreSQL</a>、<a href="https://zh.wikipedia.org/wiki/SQLite" target="_blank" rel="noopener noreferrer">SQLite</a>、<a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener noreferrer">MariaDB</a>）储存数据，在<a href="https://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">GNU GPLv2</a>许可证下发行</p><ul><li>搭建步骤：<ul><li><ol><li>注册域名</li></ol></li><li><ol start="2"><li>购买vps</li></ol></li><li><ol start="3"><li>解析域名</li></ol></li><li><ol start="4"><li>环境安装</li></ol></li><li><ol start="5"><li>安装typecho</li></ol></li></ul></li></ul><p><strong>具体详细操作流程可参照以下文章和视频：</strong></p><p><a href="https://www.typechodev.com/docs/zh_CN/" target="_blank" rel="noopener noreferrer">typecho文档</a></p><p><a href="https://www.bilibili.com/video/av58051427/" target="_blank" rel="noopener noreferrer">typecho搭建自己博客网站视频</a></p><p><a href="https://www.bilibili.com/video/av59230340/" target="_blank" rel="noopener noreferrer">使用typecho搭建个人博客视频</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="3使用hugo搭建个人博客"><strong>3.使用Hugo搭建个人博客</strong><a class="hash-link" href="#3使用hugo搭建个人博客" title="Direct link to heading">​</a></h3><p>详细介绍请参照Hugo文档：</p><p><a href="https://www.gohugo.org/doc/" target="_blank" rel="noopener noreferrer">Hugo中文文档</a></p><p><a href="https://www.bilibili.com/video/av49116509/" target="_blank" rel="noopener noreferrer">Hugo博客搭建视频教程</a></p><p><a href="https://www.bilibili.com/video/av62786612/" target="_blank" rel="noopener noreferrer">使用Hugo搭建个人博客</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="4hexogithub搭建博客"><strong>4.Hexo+GitHub搭建博客</strong><a class="hash-link" href="#4hexogithub搭建博客" title="Direct link to heading">​</a></h3><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener noreferrer">Hexo官方文档</a></p><p><a href="https://www.bilibili.com/video/av24897960?p=3" target="_blank" rel="noopener noreferrer">Hexo视频教程</a></p><p><a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener noreferrer">ShanSan的好友TRHX的手把手小白教程</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="5jekyll搭建个人博客"><strong>5.Jekyll搭建个人博客</strong><a class="hash-link" href="#5jekyll搭建个人博客" title="Direct link to heading">​</a></h3><p><a href="https://jekyllcn.com/docs/home/" target="_blank" rel="noopener noreferrer">Jekyll文档</a></p><p><a href="https://www.bilibili.com/video/av13994132/" target="_blank" rel="noopener noreferrer">Jekyll搭建个人博客视频教程</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="6gitbook"><strong>6.GitBook</strong><a class="hash-link" href="#6gitbook" title="Direct link to heading">​</a></h3><p><a href="https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html" target="_blank" rel="noopener noreferrer">GitBook文档</a></p><p><a href="https://www.bilibili.com/video/av53704955/" target="_blank" rel="noopener noreferrer">GitBook视频</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="7ghost搭建博客"><strong>7.Ghost搭建博客</strong><a class="hash-link" href="#7ghost搭建博客" title="Direct link to heading">​</a></h3><p><a href="https://ghost.org/docs/" target="_blank" rel="noopener noreferrer">Ghost官方文档</a></p><p><a href="https://www.bilibili.com/video/av6498530/" target="_blank" rel="noopener noreferrer">Ghost搭建个人博客视频教程</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="8vuepress搭建个人博客"><strong>8.VuePress搭建个人博客</strong><a class="hash-link" href="#8vuepress搭建个人博客" title="Direct link to heading">​</a></h3><p><a href="https://www.vuepress.cn/guide/" target="_blank" rel="noopener noreferrer">VuePress中文文档</a></p><p><a href="https://www.bilibili.com/video/av75219827/" target="_blank" rel="noopener noreferrer">VuePress搭建个人博客</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="9docsify搭建个人文档"><strong>9.docsify搭建个人文档</strong><a class="hash-link" href="#9docsify搭建个人文档" title="Direct link to heading">​</a></h3><p><a href="https://docsify.js.org/#/" target="_blank" rel="noopener noreferrer">docsify官方文档</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="创新基地已知个人博客一览">创新基地已知个人博客一览<a class="hash-link" href="#创新基地已知个人博客一览" title="Direct link to heading">​</a></h2><ul><li><a href="https://jaslli.github.io/" target="_blank" rel="noopener noreferrer">汣禾回星</a></li><li><a href="https://shansan.top" target="_blank" rel="noopener noreferrer">ShanSan</a></li><li><a href="https://namezh1.github.io/" target="_blank" rel="noopener noreferrer">Zh1</a></li><li><a href="https://lvshaomei.github.io/" target="_blank" rel="noopener noreferrer">LvLv</a></li><li><a href="https://xiongdadeshou.github.io/" target="_blank" rel="noopener noreferrer">兴杏梅</a></li><li><a href="https://nornoya.github.io/" target="_blank" rel="noopener noreferrer">nornoya</a></li><li><a href="https://blog.csdn.net/Suzee_" target="_blank" rel="noopener noreferrer">Suzee_</a></li><li><a href="https://pengliz.github.io/" target="_blank" rel="noopener noreferrer">pengliz</a></li><li><a href="https://y-lin9.github.io/" target="_blank" rel="noopener noreferrer">Y-lin9</a></li><li><a href="https://yuzhouxing.github.io/" target="_blank" rel="noopener noreferrer">yuchendong</a></li></ul><p><strong>博客、个人网站、知识库需要时常维护，收益不是立马就能看到的。</strong>。有些同学弄可能只是因为一时的新鲜感，说实话，这样起不到任何效果，啥也学不到。</p><p><strong>顺便再提一句，没加GitHub组织的同学快留下你的邮箱：<a href="https://github.com/seven-innovation-base/SphinxDOC/issues/7" target="_blank" rel="noopener noreferrer">https://github.com/seven-innovation-base/SphinxDOC/issues/7</a></strong></p>]]></content:encoded>
            <category>博客搭建</category>
        </item>
        <item>
            <title><![CDATA[进制转换题目解析]]></title>
            <link>https://beiliutvstation.github.io/blog/conversion-of-numbers</link>
            <guid>conversion-of-numbers</guid>
            <pubDate>Sat, 02 Nov 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[一、题目描述]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="一题目描述">一、题目描述<a class="hash-link" href="#一题目描述" title="Direct link to heading">​</a></h2><p>我们可以用这样的方式来表示一个十进制数：
将每个阿拉伯数字乘以一个以该数字所处位置的（值减1）为指数，以10为底数的幂之和的形式。例如：123可表示十进制为1x10^2+2x10^1+3x10^0这样的形式。
与之相似的，对二进制数来说，也可表示成每个二进制数码乘以一个以该数字所处位置的（值-1）为指数，以2为底数的幂之和的形式。一般说来，任何一个正整数R或一个负整数-R都可以被选来作为一个数制系统的基数。如果是以R或-R为基数，则需要用到的数码为
0，1，….R-1。例如，当R=7时，所需用到的数码是0，1，2，3，4，5和6，这与其是R或-R无关。如果作为基数的数绝对值超过10，则为了表示这些数码，通常使用英文字母来表示那些大于9的数码。例如对16进制数来说，用A表示10，用B表示11，用C表示12，用D表示13，用E表示14，用F表示15。
在负进制数中是用-R作为基数，例如-15（十进制）相当于110001（-2进制），并且它可以被表示为2的幂级数的和数：</p><p>110001=1<em>(-2)^5+1</em>(-2)^4+0<!-- -->*<!-- -->(-2)^3+0<!-- -->*<!-- -->(-2)^2+0<!-- -->*<!-- -->(-2)^1+1<!-- -->*<!-- -->(-2)^0</p><p>设计一个程序，读入一个十进制数和一个负进制数的基数，并将此十进制数转换为此负进制下的数：-R∈｛-2，-3，-4，…，-20｝。</p><p><strong>输入</strong></p><p>每个测试文件只包含一组测试数据，每组输入两个整数，第一个是十进制数N（-32768\&lt;=N\&lt;=32767）；第二个是负进制数的基数-R。</p><p><strong>输出</strong></p><p>对于每组输入数据，输出此负进制数及其基数，若此基数超过10，则参照16进制的方式处理。</p><p><strong>输入样例1</strong></p><p>3000 -2</p><p><strong>输出样例1</strong></p><p>30000=11011010101110000(base-2)</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="二问题分析">二、问题分析<a class="hash-link" href="#二问题分析" title="Direct link to heading">​</a></h2><p><strong>涉及知识点：</strong> - 十进制数转化成二进制或者八进制或者16进制。 - 短除法。 - 数字的求模取余。</p><p><strong>注意：一个负数表示成二进制的方法可以先求它相反数的二进制数，然后取反码，最后取补码，所得结果就是负数的二进制形式。不知道什么是原码、补码、反码的不要紧与解本题没有太大关系。</strong></p><p>比较难为人的事情是，题目中介绍了什么是二进制与十六进制，但要我们求解一个负二进制到负二十进制。</p><p>简单介绍一下什么是短除法
短除法是十进制转换成任意进制形式的计算方法。<strong>十进制数转换成任意进制只要用短除法除对应的码数就行了</strong>,比如,十进制数1500转换成二进制形式应该用短除法除2，如果要转成十六进制那应该短除16，转成二十进制应该短除20。
<strong>十进制数13转换成二进制的计算过程：</strong></p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">2  |__13__  1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  2  |__6__  0</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    2  |__3__  1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">              1</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>所以13的二进制形式是1101，注意要从下往上写。 短除法右边的值是余数，13除2等6余1。</p><p><strong>十进制数-15转换成负二进制的计算过程：</strong> <strong>这个过程需要特别注意！</strong></p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">错误的运算：</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  -2  |__-15__  -1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                 7</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">-1 = -15-(-2x7)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">发现短除右边余数是-1，显然错了，二进制形式余数只能为0或1，同理十六进制余数只能为0~15</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">正确的运算：余数为负数时，商应该+1，使得余数不为负数。</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  -2  |__-15__  1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     -2  |__8__  0</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       -2  |__-4__  0</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         -2  |__2__  0</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            -2  |__-1__  1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                         1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">1 = -15-(-2x8) = -15+16</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">0 = 8-(-2x-4)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">0 = -4-(-2x2)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">0 = 2-(-2x-1)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">1 = -1-(-2x1)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>所以-15的负二进制为110001。 多问就会了。</p><p><strong>所以我们把要做的事情分为以下几步：</strong> -首先进行求模运算，判断余数是否为负数 -如果余数为负数，则商+1，再求余数，把余数记录下来
-如果余数不为负数，正常求模运算，把余数记录下来</p><p>为了方便转换，定义一个字符数组charList，用于十六进制往后余数对应的字母A、B～F。</p><p><strong>Java代码实现：</strong></p><div class="codeBlockContainer_I0IT language-java theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-java codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">import java.util.ArrayList;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">import java.util.Collections;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">import java.util.List;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">import java.util.Scanner;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">public class Main {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        Scanner sc = new Scanner(System.in);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        int num = sc.nextInt();// 手动输入</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        int base = sc.nextInt(); // 手动输入</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        int num_copy = num;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        int quotient = 0;// 商</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        List&lt;Character&gt; list = new ArrayList&lt;&gt;();// 动态数组来存，因为不知道转换后有几位</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        char[] charList = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                'I', 'J' };</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        while (num != 0) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            int mod = num % base;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            if (mod &lt; 0) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                quotient = num / base + 1;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                mod = num - quotient * base;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                list.add(charList[mod]);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                num = quotient;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            }else{</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                mod = num % base;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                num /= base;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                list.add(charList[mod]);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        Collections.reverse(list);//数组倒序</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        StringBuilder sb = new StringBuilder(256);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        for (int i = 0; i &lt; list.size(); i++) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            sb.append(list.get(i));</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        System.out.println(num_copy+"="+sb.toString() + "(base" + base + ")");</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        sc.close();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p><strong>C代码实现：</strong></p><div class="codeBlockContainer_I0IT language-cpp theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-cpp codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="font-style:italic">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(195, 232, 141)">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="font-style:italic">include</span><span class="token macro property"> </span><span class="token macro property string" style="color:rgb(195, 232, 141)">&lt;stdlib.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">main</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> num </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> base </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">scanf</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"%d"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">num</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain">   </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">//手动输入</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">scanf</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"%d"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">base</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">//手动输入</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> num_copy </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> num</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> quotient </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// 商</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">char</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token plain">list</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// C语言中的动态数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    list </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">char</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token function" style="color:rgb(130, 170, 255)">malloc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">256</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">sizeof</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">char</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">char</span><span class="token plain"> charList</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token char" style="color:rgb(130, 170, 255)">'0'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'1'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'2'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'3'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'4'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'5'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'6'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'7'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'8'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'9'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                       </span><span class="token char" style="color:rgb(130, 170, 255)">'A'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'B'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'C'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'D'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'E'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'F'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'G'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'H'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'I'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'J'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">//计数器</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">num </span><span class="token operator" style="color:rgb(137, 221, 255)">!=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> mod </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> num </span><span class="token operator" style="color:rgb(137, 221, 255)">%</span><span class="token plain"> base</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">mod </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            quotient </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> num </span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain"> base </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            mod </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> num </span><span class="token operator" style="color:rgb(137, 221, 255)">-</span><span class="token plain"> quotient </span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token plain"> base</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            list</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> charList</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">mod</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            num </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> quotient</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            i</span><span class="token operator" style="color:rgb(137, 221, 255)">++</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            mod </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> num </span><span class="token operator" style="color:rgb(137, 221, 255)">%</span><span class="token plain"> base</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            num </span><span class="token operator" style="color:rgb(137, 221, 255)">/=</span><span class="token plain"> base</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            list</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> charList</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">mod</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            i</span><span class="token operator" style="color:rgb(137, 221, 255)">++</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> k </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">printf</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"%d="</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> num_copy</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">256</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> i</span><span class="token operator" style="color:rgb(137, 221, 255)">--</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">list</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">==</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">NULL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token keyword" style="font-style:italic">continue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token function" style="color:rgb(130, 170, 255)">printf</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"%c"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> list</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">printf</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"(base%d)"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> base</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div>]]></content:encoded>
            <category>Algorithms</category>
        </item>
        <item>
            <title><![CDATA[用win10自带虚拟机Hyper-V玩转Linux]]></title>
            <link>https://beiliutvstation.github.io/blog/win10-hyper-v</link>
            <guid>win10-hyper-v</guid>
            <pubDate>Tue, 24 Sep 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[教你如何使用win10自带虚拟机Hyper-V]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="教你如何使用win10自带虚拟机hyper-v">教你如何使用win10自带虚拟机Hyper-V<a class="hash-link" href="#教你如何使用win10自带虚拟机hyper-v" title="Direct link to heading">​</a></h2><ol><li>按win+pause break快速打开控制面板的系统和安全中的系统，点击控制面板</li></ol><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190923171407.png" class="img_E7b_"></p><ol start="2"><li>在控制面版中，打开程序组件，选择程序与功能。点击启动或关闭windows功能。</li></ol><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190923171626.png" class="img_E7b_"></p><ol start="3"><li>找到Hyper-V，打勾（注意win10家庭版时没有Hyper-V）</li></ol><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190923171703.png" class="img_E7b_"></p><ol start="4"><li>勾选后，点击立即重启</li></ol><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190923172021.png" class="img_E7b_"></p><ol start="5"><li>开机后找到Hyper-V，打开程序</li></ol><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190923172501.png" class="img_E7b_"></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="虚拟机网络配置">虚拟机网络配置<a class="hash-link" href="#虚拟机网络配置" title="Direct link to heading">​</a></h2><ol><li>打开Hyper-V，在右侧操作列表中点击“虚拟交换机管理”，打开虚拟交换机管理器</li></ol><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190924164944.png" class="img_E7b_"></p><ol start="2"><li>选择“新建虚拟网络交换机”，在虚拟交换机类型列表中选择“外部”，点击“创建虚拟交换机”，创建一个虚拟交换机，输入虚拟交换机的名称和说明，为虚拟交换机选择一个网络适配器（即物理网卡），点击“确定”。</li></ol><p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190924165115.png" class="img_E7b_"></p><ol start="3"><li>等待应用更改
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190924165221.png" alt="image0" class="img_E7b_"></li><li>在Hyper-V管理器中，选择虚拟机，点击右侧操作列表中的“设置”，修改虚拟机配置。
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190924172354.png" alt="image1" class="img_E7b_"></li><li>在虚拟机设置界面，点击“网络适配器”，选择虚拟交换机，点击确定，这样就配置好了虚拟机的网络连接。
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190924165322.png" alt="image2" class="img_E7b_">
这样就完成里虚拟机的网络配置了；</li></ol><h2 class="anchor anchorWithStickyNavbar_mojV" id="开始创建虚拟机了">开始创建虚拟机了<a class="hash-link" href="#开始创建虚拟机了" title="Direct link to heading">​</a></h2><ol><li>下载虚拟机需要的镜像</li></ol><p>推荐win10镜像链接：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener noreferrer">https://msdn.itellyou.cn/</a></p><p>推荐Linux链接：<a href="https://ubuntu.com/download/desktop/thank-you?country=CN%5C&amp;version=18.04.3%5C&amp;architecture=amd64%5C#download" target="_blank" rel="noopener noreferrer">https://ubuntu.com/download/desktop/thank-you?country=CN\&amp;version=18.04.3\&amp;architecture=amd64\#download</a></p><p>将下载成功的镜像放在电脑上的一个文件夹中以备后用。</p><ol start="2"><li>开始创建 1）点击新建虚拟机
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190923180139.png" alt="image3" class="img_E7b_"></li></ol><p>2）设置你的虚拟机的名称
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190923180432.png" alt="image4" class="img_E7b_"></p><p>3）指定代数，我选择的是第一代，继续选择下一步</p><p>4）网络配置，选择我们刚刚设置的网络名称</p><p>5）从我们的文件夹中选择镜像
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190923181050.png" alt="image5" class="img_E7b_"></p><p>6）后续就是下一步，完成。 示意图：
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190923181246.png" alt="image6" class="img_E7b_"></p><p>7）这里显示已经创建好了，然后右键选择启动该虚拟机(有点小慢)。启动之后右键选择连接开始自动安装系统，注意选择语言，否则安装之后是英文，如果对英文有点感冒的话，这里就修改下，要不然安装好之后有需要在设置里修改。
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190924155802.png" alt="image7" class="img_E7b_"></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="安排">安排：<a class="hash-link" href="#安排" title="Direct link to heading">​</a></h2><p>选择语言点击install ubuntu，之后就是下一步、下一步。
<img loading="lazy" src="https://cdn.jsdelivr.net/gh/upsilverfox/turoot/pic20190924160051.png" alt="image8" class="img_E7b_"></p><p>说明：1.因为是虚拟机所以可以清空虚拟U盘里的东西，这样对你现有的电脑文件没有影响的 2. 如果重启的时候出现错误记得关闭虚拟机，然后在开启。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="参考">参考：<a class="hash-link" href="#参考" title="Direct link to heading">​</a></h2><ol><li><a href="https://baijiahao.baidu.com/s?id=1607835632188281786&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener noreferrer">https://baijiahao.baidu.com/s?id=1607835632188281786&amp;wfr=spider&amp;for=pc</a></li><li><a href="https://jingyan.baidu.com/article/a681b0de6109253b18434635.html" target="_blank" rel="noopener noreferrer">https://jingyan.baidu.com/article/a681b0de6109253b18434635.html</a></li><li><a href="https://jingyan.baidu.com/article/e9fb46e129349d7520f76648.html" target="_blank" rel="noopener noreferrer">https://jingyan.baidu.com/article/e9fb46e129349d7520f76648.html</a></li></ol>]]></content:encoded>
            <category>Linux</category>
            <category>虚拟机</category>
        </item>
        <item>
            <title><![CDATA[StringBuilder的高性能使用方式总结]]></title>
            <link>https://beiliutvstation.github.io/blog/StringBuilder-High-Performance-Usecase</link>
            <guid>StringBuilder-High-Performance-Usecase</guid>
            <pubDate>Fri, 30 Aug 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[一、设置合理的初始长度]]></description>
            <content:encoded><![CDATA[<h4 class="anchor anchorWithStickyNavbar_mojV" id="一设置合理的初始长度">一、设置合理的初始长度<a class="hash-link" href="#一设置合理的初始长度" title="Direct link to heading">​</a></h4><p>在StringBuilder的源码中，有一个char<!-- -->[ ]<!-- -->数组，这个就是用来存储字符的。</p><div class="codeBlockContainer_I0IT language-java theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-java codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">//AbstractStringBuilder.java</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">* The value is used for character storage.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">*/</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">char[] value;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">* The count is the number of characters used.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">*/</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">int count;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>而count统计字符数量。当直接<code>new StringBuilder();</code>时，传递到父类的默认大小(capacity)为16，也就是默认状态下char<!-- -->[ ]<!-- -->数组的长度为16。
来看一下append方法：</p><div class="codeBlockContainer_I0IT language-java theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-java codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">//AbstractStringBuilder.java</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">public AbstractStringBuilder append(String str) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    if (str == null)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return appendNull();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    int len = str.length();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    ensureCapacityInternal(count + len);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    str.getChars(0, len, value, count);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    count += len;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    return this;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">private void ensureCapacityInternal(int minimumCapacity) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    // overflow-conscious code</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    if (minimumCapacity - value.length &gt; 0) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        value = Arrays.copyOf(value,</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                newCapacity(minimumCapacity));</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">public static char[] copyOf(char[] original, int newLength) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    char[] copy = new char[newLength];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    System.arraycopy(original, 0, copy, 0,</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    Math.min(original.length, newLength));</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    return copy;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">private int newCapacity(int minCapacity) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    // overflow-conscious code</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    int newCapacity = (value.length &lt;&lt; 1) + 2;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    if (newCapacity - minCapacity &lt; 0) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        newCapacity = minCapacity;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    return (newCapacity &lt;= 0 || MAX_ARRAY_SIZE - newCapacity &lt; 0)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        ? hugeCapacity(minCapacity)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        : newCapacity;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>从上述源码中，可以看到append方法接收String类型的参数，然后调用<code>ensureCapacityInternal()</code>方法，在这个方法里面我们可以看到做了一个判断，最小容量<code>minimumCapacity</code>是否比数组的长度大，而最小容量的大小是<code>len+count</code>。
数组长度大于最小容量的话就要扩容，<code>Arrays.copyOf(value,newCapacity(minimumCapacity));</code>这段代码执行数组拷贝。
从<code>Array.copyof(char[] original, int newLength)</code>可以看到第二个参数是数组新的长度，而这个新的长度来自<code>newCapacity()</code>的返回值。
在<code>newCapacity()</code>中我们看到<code>int newCapacity = (value.length &lt;&lt; 1) + 2;</code>，char<!-- -->[ ]<!-- -->数组的长度左移一位再加2，也就是长度x2+2。
从上面的分析中就可以看到数组的扩容是成倍的，如果StringBuilder不设置合适的初始长度就会进行扩容，造成一点内存损失。</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="二重用stringbuilder">二、重用StringBuilder<a class="hash-link" href="#二重用stringbuilder" title="Direct link to heading">​</a></h4><div class="codeBlockContainer_I0IT language-java theme-code-block"><div class="codeBlockContent_wNvx" style="color:#bfc7d5;background-color:#292d3e"><pre tabindex="0" class="prism-code language-java codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#bfc7d5"><span class="token plain">public class MyClass{</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    private static Field stringBuilderValueField;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    private static Boolean needGetField = true;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    //ThreadLocal适用于变量在线程之间隔离，方法之间共享</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    private static ThreadLocal&lt;StringBuilder&gt; sbBuffer = new ThreadLocal&lt;StringBuilder&gt;();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    //重用StringBuilder的例子</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public static StringBuilder obtainStringBuilder(){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        StringBuilder stringBuilder = sbBuffer.get();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        if (stringBuilder == null) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            System.out.println("stringBuilder为空");</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            stringBuilder = new StringBuilder(1024 * 10);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            sbBuffer.set(stringBuilder);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            System.out.println("stringBuilder不为空");</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            stringBuilder.delete(0, stringBuilder.length());</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return stringBuilder;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">//调用方式为</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">StringBuilder stringBuilder = MyClass.obtainStringBuilder();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">StringBuilder stringBuilder2 = MyClass.obtainStringBuilder();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">stringBuilder.append(.....);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">stringBuilder2.append(.....);</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>从上述的代码中可以看到，<code>obtainStringBuilder()</code>方法返回一个StringBuilder对象，方法中首先从ThreadLocal中取StringBuilder然后判断是否为空，如果为空的话则初始化一个StringBuilder对象，大小根据实际情况设置。否则的话就清空StringBuilder的内容来重用。
对于同一个线程来说，每次调用<code>obtainStringBuilded()</code>方法拿到的都是同一个StringBuilder对象。但是对于不同线程来说，两个线程之间的StringBuilder对象是相互独立的，没有任何关系。
这样的好处是减少申请内存的频率，降低GC（垃圾回收）的发生。</p>]]></content:encoded>
            <category>Java</category>
        </item>
    </channel>
</rss>